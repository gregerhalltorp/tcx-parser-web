AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: TCX Parser Stack - CloudFront

Parameters:
  CertificateArn:
    Description: Certificate locater
    Type: String
  DomainName:
    Description: Apex domain
    Type: String
  SubDomain:
    Description: Subdomain
    Type: String
  WebBucket:
    Description: Content Bucket
    Type: String
  WebBucketName:
    Description: Content Bucket
    Type: String
  WebBucketArn:
    Description: Content Bucket locator
    Type: String
  LogBucket:
    Description: Logging Bucket
    Type: String
  LogBucketName:
    Description: Logging Bucket
    Type: String

Resources:
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "${WebBucketArn}/^"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Sub "${SubDomain}.${DomainName}"
        DefaultCacheBehavior:
          TargetOriginId: !Sub "S3-${AWS::StackName}-root"
          ViewerProtocolPolicy: "redirect-to-https"
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          # LambdaFunctionAssociations:
          #   - EventType: origin-response
          #     LambdaFunctionARN: !Ref LambdaVersion
        CustomErrorResponses:
          - ErrorCode: 404
            ErrorCachingMinTTL: 60
            ResponseCode: 404
            ResponsePagePath: "/404.html"
          - ErrorCode: 403
            ErrorCachingMinTTL: 60
            ResponseCode: 403
            ResponsePagePath: "/403.html"
        HttpVersion: "http2"
        DefaultRootObject: "index.html"
        IPV6Enabled: true
        Logging:
          Bucket: !Ref LogBucketName
          IncludeCookies: false
          Prefix: "cdn/"
        Origins:
          - DomainName: !Ref WebBucketName
            Id: !Sub "S3-${AWS::StackName}-root"
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [
                  "",
                  [
                    "origin-access-identity/cloudfront/",
                    !Ref CloudFrontOriginAccessIdentity,
                  ],
                ]
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: "TLSv1.1_2016"
          SslSupportMethod: "sni-only"

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "CloudFront OAI for ${SubDomain}.${DomainName}"

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      RecordSets:
        - Name: !Sub "${SubDomain}.${DomainName}"
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: "Z2FDTNDATAQYW2"
            EvaluateTargetHealth: false

  # LambdaEdgeFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: index.handler
  #     Role: !GetAtt LambdaEdgeFunctionRole.Arn
  #     CodeUri: "../s-headers.zip"
  #     Runtime: "nodejs12.x"
  #     Timeout: 25

  # LambdaVersion:
  #   Type: AWS::Lambda::Version
  #   Properties:
  #     FunctionName: !Ref LambdaEdgeFunction
  #     Description: v1

  # LambdaEdgeFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: "AllowLambdaServiceToAssumeRole"
  #           Effect: "Allow"
  #           Action:
  #             - "sts:AssumeRole"
  #           Principal:
  #             Service:
  #               - "lambda:.amazonws.com"
  #               - "edgelambda.amazonws.com"
  #     Path: "/"
  #     ManagedPolicyArns:
  #       - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

Outputs:
  # LambdaEdgeFunctionVersion:
  #   Description: Security Lambda version
  #   Value: !Ref LambdaVersion

  CloudFrontDistribution:
    Description: CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName

  CloudFrontDomainName:
    Description: Website address
    Value: !Sub "${SubDomain}.${DomainName}"
